# топ способы:


# a,b,h=(int(input()) for i in range(3)) # task 5
# print(('Недосып','Это нормально','Пересып')[(h>=a)+(h>b)]) # Из принта можно вынимать значения, как из списка

# x = int(input())  # task 8
# print(-15 < x <= 12 or 14 < x < 17 or 19 <= x)  # не забывай, что true и false сами будут печататсья, не обязательно их писать

# first = input('введите текст: \n') # task 9
# second = input()
# action = input()
# operations = {"mod": "%", "div": "//", "pow": "**"} #вот так создают словать
# try: # отлов возможных ошибок через try-except (нагляднее, чем if)
#     print(eval(first + operations.get(action, action) + second)) # ф. eval преобразует выражение из строк, соединенных между собой, в мат. выражение
# except ZeroDivisionError:
#     print('Деление на 0!')
# except SyntaxError: # ловим ошибку, когда у нас нет такой операции
#     print('нет такой функции')

# 2: ---------------------# task 11
# a, b, c = int(input()), int(input()), int(input()) #  удобный ввод
# max_int = max(a, b, c)
# min_int = min(a, b, c)
# print(max_int)
# print(min_int)
# print((a + b + c) - max_int - min_int) # мат. расчет помогает оставшееся значение

# 3: --------------------- # task 11
# x = sorted([int(input()),int(input()),int(input())]) # в метод сортировки вложили список, в который вложили инпуты!
# print (x[2], x[0], x[1], sep="\n")

# x = int(input()) # task 12
# if x % 100 in (11, 12, 13, 14) or x % 10 in (5, 6, 7, 8, 9, 0): print(x, 'программистов') # if можно проверять список, крутое решение
# elif x % 10 in (2, 3, 4): print(x, 'программиста')
# else: print(x, 'программист')

# a, b, c, d, e, f = input()  # task 13 Автоматически разделяет введенную строку по цифре(букве)
# n = int(a) + int(b) + int(c)
# m = int(d) + int(e) + int(f)
# if n == m:
#     print('Счастливый')
# else:
#     print('Обычный')
# a, b, c = input() # just testing))
# print(a, c, b, 'nice')

# ==================================================================================================================================================
# task 1:
# Тимофей обычно спит ночью X часов и устраивает себе днем тихий час на Y минут.
# Определите, сколько всего минут Тимофей спит в сутки.

# my decision:
# X = int(input())
# Y = int(input())
# print(X*60 + Y)

# best decision:
# print((int(input())*60)+ int(input()))

# ===========================================================================================================

# task 2:
# Коля каждый день ложится спать ровно в полночь и недавно узнал, что оптимальное время для его сна составляет
# X минут. Коля хочет поставить себе будильник так, чтобы он прозвенел ровно через X X X минут после полуночи,
# однако для этого необходимо указать время сигнала в формате часы, минуты.
# Помогите Коле определить, на какое время завести будильник.

# my decision:
# a = int(input())
# c = a //60 # минуты в часы
# b = a%60
# print(c)
# print(b)

# best decisions:
# 1---------
# a=int (input())
# print(a//60)
# print(a%60)
# 2---------
# print(*divmod(int(input()), 60), sep='\n')
# 3---------
# X=int(input())
#  print(f"{X//60}\n{X%60}") # f - function

# ================================================================================================================

# task 4:
# Катя узнала, что ей для сна надо X минут. В отличие от Коли, Катя ложится спать после полуночи в H часов
# и M минут. Помогите Кате определить, на какое время ей поставить будильник, чтобы он прозвенел ровно
# через X минут после того, как она ляжет спать.
# На стандартный ввод, каждое в своей строке, подаются значения X, H  и M. Гарантируется, что Катя должна
# проснуться в тот же день, что и заснуть. Программа должна выводить время, на которое нужно поставить
# будильник: в первой строке часы, во второй — минуты.

# my decision:
# a = int(input())
# h = int(input()) *60
# m = int(input())
# a += h + m
# c = a //60  # минуты в часы
# b = a%60
# print(c)
# print(b)

# best decisions:
# 1-----------
# X = int(input()) + int(input()) * 60 + int(input())
# print (X // 60, "\n", X % 60)
# 2------------
# a, b, c = (int(input()) for i in range(3))
# print('%s\n%s' % ((a + c) // 60 + b, (a + c) % 60))

# ================================================================================================================

# task 5:
# Из передачи “Здоровье” Аня узнала, что рекомендуется спать хотя бы A A A часов в сутки, но пересыпать тоже вредно
#  и не стоит спать более B B B часов. Сейчас Аня спит H H H часов в сутки. Если режим сна Ани удовлетворяет
#  рекомендациям передачи “Здоровье”, выведите “Это нормально”. Если Аня спит менее A A A часов,
#  выведите “Недосып”, если же более B B B часов, то выведите “Пересып”.
# Получаемое число A A A всегда меньше либо равно B B B.
# На вход программе в три строки подаются переменные в следующем порядке: A A A, B B B, H H H.

# my decision:
# a = int(input())
# b = int(input())
# h = int(input())
# if h >= a and h <= b:
# 	print ('Это нормально')
# elif h > b:
# 	print ('Пересып')
# else:
# 	print ('Недосып')

# best decisions:
# 1:
# a, b, h = [int(input()) for i in range(3)]
# print('Пересып' if h > b else 'Недосып' if h < a else 'Это нормально')
# 2:
# a,b,h=(int(input()) for i in range(3))
# print(('Недосып','Это нормально','Пересып')[(h>=a)+(h>b)])

# ================================================================================================================

# task 6:
# Требуется определить, является ли данный год високосным.
# Напомним, что високосными годами считаются те годы,
# порядковый номер которых либо кратен 4, но при этом не кратен 100, либо
# кратен 400 (например, 2000-й год являлся високосным, а 2100-й будет невисокосным годом).
# Программа должна корректно работать на числах 1900≤n≤3000.

# my decision:
# y = int(input())
# if  ((y%4 == 0) and (y%100 != 0)) or (y%400 == 0):
# 	print('Високосный')
# else:
# 	print ('Обычный')

# best decisions:

# ================================================================================================================

# task 7:
# напишите программу, вычисляющую площадь треугольника по переданным длинам трёх его сторон по формуле Герона:
#  S = sqrt(p(p−a)(p−b)(p−c))
# где  p = {a+b+c}/2 ​ – полупериметр треугольника. На вход программе подаются целые числа, выводом программы должно
# являться вещественное число, соответствующее площади треугольника.

# my decision:
# a = int(input())
# b = int(input())
# c = int(input())
# p = (a + b + c) / 2
# print ((p*(p-a)*(p-b)*(p-c))**(1/2))

# best decisions:

# ================================================================================================================

# task 8:
# Напишите программу, принимающую на вход целое число, которая выводит True, если переданное значение попадает
# в интервал (−15,12]∪(14,17)∪[19,+∞)  и False
# в противном случае (регистр символов имеет значение).

# my decision:
# a = int(input())
# if (-15 < a <= 12) or (14 < a < 17) or (19<= a):
# 	print('True')
# else:
# 	print ('False')

# best decisions:
# 1:
# n = int(input())
# print((n in range(-14, 13)) or (n in range(15, 17)) or (n >= 19))
# 2:
# x = int(input())
# print (-15 < x <= 12 or 14 < x < 17 or 19 <= x)

# ================================================================================================================

# task 9:
# Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и
# операцию, после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит
# результат на экран.
# Поддерживаемые операции: +, -, /, *, mod, pow, div, где
# mod — это взятие остатка от деления,
# pow — возведение в степень,
# div — целочисленное деление.
# Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".

a = int(input())
b = int(input())
oper = input()
dict_oper = {1: lambda a, b: a * b}




# my decision:
# a = float(input())
# b = float(input())
# s = input()
# if s == '+':
# 	print (a + b)
# elif s == '-':
# 	print (a - b)
# elif s == '*':
# 	print (a*b)
# elif (s == 'mod') and (b != 0):
# 	print(a%b)
# elif s == 'pow':
# 	print(a**b)
# elif (s == 'div') and (b != 0):
# 	print(a//b)
# elif (s == '/') and (b !=0):
# 	print (a/b)
# else: print ("Деление на 0!")

# best decisions:
# Нашел интересный вопрос Льва Романова: "нельзя как-то заставить питон считать операцию инпута? на пример
# s = a + c + b, где "с" это  операция?" - да, можно (правда в предыдущих уроках почти ничего из этого не было)
# Всё довольно просто - на вход мы получаем три значения, два числа и знак, и, если их в правильном порядке соединить
# друг с другом, получится вполне осмысленное выражение.
# Для того, чтобы это выражение прочитать, есть функция eval(), принимающая на вход строку и преобразовывающая
# её в выражение, с которым интерпретатор может работать. Соответственно, нам необходимо все три значения привести
# к типу string* и объединить их в одну строку, что легко сделать при помощи конкатенации строк.
# Если со знаками +, -, *, / всё просто, их интерпретатор воспримет как надо и выдаст корректный результат,
# то как быть с pow, div, mod, ведь таких действий питон не знает. Нужно им как-то задать соответствия
# и в этом помогает словарь. В словаре задаются пары ключ, значение. В моём решении это переменная operations.
# Получить значение по ключу можно несколькими способами, но, так как я в словаре указал всего три пары,
# мне был нужен тот, который избавит меня от лишней условной инструкции, указывающей интерпретатору что делать,
# если ключа нет в словаре. Это метод .get(). Он позволяет получить из словаря значение по ключу, так же в нём
# можно указать значение, которое будет возвращаться в случае отсутствия указанного ключа в словаре. Выглядит это
# следующим образом словарь.get("ключ", "значение, если ключа нет в словаре").
# Осталось лишь обработать ситуацию, когда что-то делится на 0. Тут можно было бы использовать условную инструкцию,
# перечислить условия, когда выдавалось бы сообщение "Деление на 0!", но это было бы более громоздко и, на мой взгляд,
# менее читабельно. Потому я использовал try...except. Эта конструкция пробует выполнить действие указанное
# в блоке try и, если возникает ошибка, указанная в except (в нашем случае это ZeroDivisionError, тоесть деление на 0)
# действие программы не прерывается, а выполняется блок except, в нашем случае это печать сообщения "Деление на 0!".
# * А вообще, чтобы не совершать лишних преобразований, можно было бы все три переменные считать как input(),
# тогда они будут строками, и не преобразовывать из типа float обратно в тип string, но я об этом поздно подумал.

# first = input('введите текст: \n')
# second = input()
# action = input()
# operations = {"mod": "%", "div": "//", "pow": "**"}
# try:
#     print(eval(first + operations.get(action, action) + second))
# except ZeroDivisionError:
#     print('Деление на 0!')
# except SyntaxError: # ловим ошибку, когда у нас нет такой операции
#     print('нет такой функции')
# ================================================================================================================

# task 10:
# Жители страны Малевии часто экспериментируют с планировкой комнат.
# Комнаты бывают треугольные, прямоугольные и круглые. Чтобы быстро вычислять жилплощадь,
# требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие параметры,
# которая бы выводила площадь получившейся комнаты.
# Для числа π в стране Малевии используют значение 3.14.

# my decision:
# name = input()
# if name == 'треугольник':
# 	a = int(input())
# 	b = int(input())
# 	c = int(input())
# 	p = (a + b + c) / 2
# 	print ((p*(p-a)*(p-b)*(p-c))**(1/2))
#
# elif name == 'прямоугольник':
# 	a = int(input())
# 	b = int(input())
# 	print (a*b)
#
# elif name == 'круг':
# 	a = int(input())
# 	print (3.14*a**2)
#
# else: print ('y')

# best decisions:
# shape = input()
#
# a = float(input())
#
# if shape == "треугольник" or shape == "прямоугольник":
#     b = float(input())
#     S = a*b
#     if shape == "треугольник":
#         c = float(input())
#         p = (a+b+c)/2
#         S = (p*(p-a)*(p-b)*(p-c))**0.5
# else:
#     S = 3.14*a**2
#
# print(S)
# ================================================================================================================

# task 11:
# Напишите программу, которая получает на вход три целых числа, по одному числу в строке,
# и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.
# На ввод могут подаваться и повторяющиеся числа.

# my decision:
# a = int(input())
# b = int(input())
# c = int(input())
#
# if (a >= b) and (b >= c):
#     print(a)
#     print(c)
#     print(b)
# elif (a >= c) and (c >= b):
#     print(a)
#     print(b)
#     print(c)
#
# elif (b >= a) and (a >= c):
#     print(b)
#     print(c)
#     print(a)
# elif (b >= c) and (c >= a):
#     print(b)
#     print(a)
#     print(c)
#
# elif (c >= a) and (a >= b):
#     print(c)
#     print(b)
#     print(a)
# elif (c >= b) and (b >= a):
#     print(c)
#     print(a)
#     print(b)
# else:
#     print('?')

# best decisions:
# 1------------------:
# a,b,c = int(input()), int(input()), int(input())
#
# if a < b:
# 	a, b = b, a
# if a < c:
# 	a, c = c, a
# if b > c:
# 	b, c = c, b
# print(a)
# print(b)
# print(c)

# 2: ---------------------
# a, b, c = int(input()), int(input()), int(input())
# max_int = max(a, b, c)
# min_int = min(a, b, c)
# print(max_int)
# print(min_int)
# print((a + b + c) - max_int - min_int)

# 3: ---------------------
# x = sorted([int(input()),int(input()),int(input())])
# print (x[2], x[0], x[1], sep="\n")
# ================================================================================================================

# task 12:
# В институте биоинформатики по офису передвигается робот. Недавно студенты из группы
# программистов написали для него программу, по которой робот, когда заходит в комнату,
# считает количество программистов в ней и произносит его вслух: "n программистов".
# Для того, чтобы это звучало правильно, для каждого n n n нужно использовать верное окончание слова.
# Напишите программу, считывающую с пользовательского ввода целое число n n n (неотрицательное),
# выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того,
# чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.
# В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи,
# как минимум до 1000 человек

# my decision:
# a = int(input())
# if (a % 10 == 1) and (a % 100 != 11):
#     print(a, 'программист')
# elif (a % 10 == 2 and a % 100 != 12) or (a % 10 == 3 and a % 100 != 13) or (a % 10 == 4 and a % 100 != 14):
#     print(a, 'программиста')
# else:
#     print(a, 'программистов')

# best decisions:
# 1:---------------
# x = int(input())
# if x % 100 in (11, 12, 13, 14) or x % 10 in (5, 6, 7, 8, 9, 0): print(x, 'программистов')
# elif x % 10 in (2, 3, 4): print(x, 'программиста')
# else: print(x, 'программист')

# 2:---------------
# a = int(input())
# n = a%10
# x = a%100
# if 11 <= x <= 14:
#     print(a, "программистов")
# else:
#     if 2 <= n <= 4:
#         print(a, "программиста")
#     elif (5 <= n <= 9) or (n == 0):
#         print(a, "программистов")
#     elif n == 1:
#         print(a, "программист")
# 3:---------------
# n=int(input())
# print(n,'программист'+('ов' if n%10==0 or 4<n%10<10 or 10<n%100<15 else 'а' if 1<n%10<5 else ''))

# ================================================================================================================

# task 13:
# Паша очень любит кататься на общественном транспорте, а получая билет, сразу проверяет, счастливый ли ему попался.
# Билет считается счастливым, если сумма первых трех цифр совпадает с суммой последних трех цифр номера билета.
# Однако Паша очень плохо считает в уме, поэтому попросил вас написать программу, которая проверит равенство сумм и
# выведет "Счастливый", если суммы совпадают, и "Обычный", если суммы различны.
# На вход программе подаётся строка из шести цифр.
# Выводить нужно только слово "Счастливый" или "Обычный", с большой буквы.

# my decision:
# a = int(input())
# if (int(a / 1000) % 10 + int(a / 10000) % 10 + int(a / 100000) % 10) == (
#         (a % 10) + int(a / 10) % 10 + int(a / 100) % 10):
#     print('Счастливый')
# else:
#     print('Обычный')

# best decisions:
# 1:---------------
# a, b, c, d, e, f = input()
# n = int(a) + int(b) + int(c)
# m = int(d) + int(e) + int(f)
# if n == m:
#     print('Счастливый')
# else:
#     print('Обычный')
